package modelManifiesto.bc;


import java.sql.ResultSet;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

import model.bc.ModuloImpl;
import model.bc.VistaObjeto;
import model.bc.modulo.Reporte;

import modelAuditoria.bc.AuditoriaModuloImpl;

import modelManifiesto.bc.common.ManifiestoModulo;
import modelManifiesto.bc.modulo.AerolineaUsuario;
import modelManifiesto.bc.modulo.Manifiesto;
import modelManifiesto.bc.vista.ManifiestoViewImpl;
import modelManifiesto.bc.vistaNoDML.LibroDireccionesViewNoDMLImpl;
import modelManifiesto.bc.vistaNoDML.ManifiestoViewNoDMLImpl;
import modelManifiesto.bc.vistaNoDML.UsuarioAsignadoViewNoDMLImpl;
import modelManifiesto.bc.vistaNoDML.UsuarioViewNoDMLImpl;

import modelManifiesto.utilidades.estructura.AerolineaUsuarioIndices;

import oracle.jbo.JboException;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 18 01:00:06 ECT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ManifiestoModuloImpl extends ModuloImpl implements ManifiestoModulo {

    AerolineaUsuarioIndices aerolineaUsuarioIndices = new AerolineaUsuarioIndices();

    final String SQL_MANIFIESTO =
        "SELECT id_manifiesto, id_usuario, nick, nombre_usuario, id_libro_direccion_aerolinea, indice_aerolinea, nombre_aerolinea, id_libro_direccion_aeropuerto, indice_aeropuerto, nombre_aeropuerto, id_libro_direccion_aeropuerto_des, indice_destino, nombre_destino, id_libro_direccion_aeronave, indice_aeronave, nombre_aeronave, fecha_local_operacion, fecha_corta_local_operacion, anio_fecha_operacion as 'aÃ±o_fecha_operacion', mes_fecha_operacion, no_vuelo, pasajeros, pasajeros_transito, pasajeros_locales, pasajeros_exentos_tasas, pasajeros_pagan_tasas, pasajeros_pagan_dolares, pasajeros_pagan_pesos, pasajeros_exentos_timbres, pasajeros_pagan_timbres, pasajeros_pagan_timbres_dolares, pasajeros_pagan_timbres_pesos, tasa, timbre, timbre_total, indicador_comprobable, tipo, estado, usuario, usuario_fecha, usuario_programa FROM MV_001_00.v_manifiesto where";


    /**
     * This is the default constructor (do not remove).
     */
    public ManifiestoModuloImpl() {
        super();
        setNombreBundle("modelManifiesto.ModelManifiestoBundle");
    }

    /**
     * Metodo para cambiar el estado del Manifiesto y evitar su edision.
     *
     * @param idManifiesto
     */
    public void cambiarEstadoManifiesto(String idManifiesto) {
        Manifiesto.cambiarEstado(this, idManifiesto);
    }
    
    /**
     * Metodo para cambiar el estado a todos los elementos.
     */
    public void cambiarEstadoManifiestos() {
        Manifiesto.cambiarEstadoCompleto(this);
    }
    
    /**
     * Metodo para generar el archivo de excel de manifiesto.
     *
     * @param idUsuario
     * @param indiceAerolinea
     * @param indiceAeropuertoOrigen
     * @param indiceAeropuertoDestino
     * @param indiceAeronave
     * @param noVuelo
     * @param fechaInicio
     * @param fechaFin
     * @param tabla
     * @param usuario
     * @param usuarioPrograma
     * @return
     */
    public int excelManifiesto(int idUsuario, int indiceAerolinea, int indiceAeropuertoOrigen,
                               int indiceAeropuertoDestino, int indiceAeronave, String noVuelo, String fechaInicio,
                               String fechaFin, String tabla, String usuario, String usuarioPrograma) {
        int idArchivo = 0;
        String pattern = "yyyy-MM-dd-HH-mm-ss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        String nombrePagina = String.format("%s-%s-%s.xls", tabla, usuario, simpleDateFormat.format(new Date()));

        String sql = SQL_MANIFIESTO;

        if (idUsuario > 0) {
            sql = sql + " (id_usuario = " + idUsuario + " )  AND";
        }
        if (indiceAerolinea > 0) {
            sql = sql + " (id_libro_direccion_aerolinea = " + indiceAerolinea + " )  AND";
        }
        if (indiceAeropuertoOrigen > 0) {
            sql = sql + " (id_libro_direccion_aeropuerto = " + indiceAeropuertoOrigen + " ) AND";
        }
        if (indiceAeropuertoDestino > 0) {
            sql = sql + " (id_libro_direccion_aeropuerto_des = " + indiceAeropuertoDestino + " ) AND";
        }
        if (indiceAeronave > 0) {
            sql = sql + " (id_libro_direccion_aeronave = " + indiceAeronave + " ) AND";
        }
        if (noVuelo != null && noVuelo.trim().length() > 0 && noVuelo.compareTo("0") != 0) {
            sql = sql + " (UPPER(no_vuelo) LIKE UPPER('%" + noVuelo + "%') ) AND";
        }

        sql =
            sql + " (fecha_corta_local_operacion BETWEEN  '" + convertirDate(fechaInicio) + "'  AND  '" +
            convertirDate(fechaFin) + "')";
        
        ResultSet resultSet = this.getBaseDML().ejecutaConsulta(sql);
        if (this.getBaseDML().getMensaje() != null) {
            throw new JboException("no consulta SQL");
        }

        idArchivo =
            Reporte.crearReporteExcel(this, resultSet, nombrePagina, "manifiesto", tabla, usuario, usuarioPrograma);
        return idArchivo;
    }


    /**
     * Metodo para convertir una fecha.
     *
     * @param fechaStr
     * @return
     */
    private String convertirDate(String fechaStr) {
        DateFormat dateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.US);
        DateFormat dateFormatSimple = new SimpleDateFormat("yyyy-MM-dd");
        String respuesta = fechaStr;
        try {
            java.util.Date fechaTemp = dateFormat.parse(fechaStr);
            respuesta = dateFormatSimple.format(fechaTemp);

        } catch (Exception e) {
            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, e.toString());
        }
        return respuesta;
    }

    /**
     * Metodo para buscar informacion del usuario de manifiesto.
     *
     * Consulta:
     * idUsuario por default
     *
     * @param nick
     * @return
     */
    public int getIdUsuarioNick(String nick) {
        aerolineaUsuarioIndices = AerolineaUsuario.buscarUsuario(this, nick);
        return aerolineaUsuarioIndices.getIdUsuario();
    }


    public int getIdAerolineaNick(String nick) {
        aerolineaUsuarioIndices = AerolineaUsuario.buscarUsuario(this, nick);
        return aerolineaUsuarioIndices.getIdAerolinea();
    }

    public int getIdAeropuertoNick(String nick) {
        aerolineaUsuarioIndices = AerolineaUsuario.buscarUsuario(this, nick);
        return aerolineaUsuarioIndices.getIdAeropuerto();
    }

    /**
     * Container's getter for InformacionView1.
     * @return InformacionView1
     */
    public VistaObjeto getInformacionView1() {
        return (VistaObjeto) findViewObject("InformacionView1");
    }

    /**
     * Container's getter for ManifiestoView1.
     * @return ManifiestoView1
     */
    public ManifiestoViewImpl getManifiestoView1() {
        return (ManifiestoViewImpl) findViewObject("ManifiestoView1");
    }


    /**
     * Container's getter for LibroDireccion1View1.
     * @return LibroDireccion1View1
     */
    public VistaObjeto getLibroDireccionView1() {
        return (VistaObjeto) findViewObject("LibroDireccionView1");
    }


    /**
     * Container's getter for UsuarioViewNoDML1.
     * @return UsuarioViewNoDML1
     */
    public UsuarioViewNoDMLImpl getUsuarioViewNoDML1() {
        return (UsuarioViewNoDMLImpl) findViewObject("UsuarioViewNoDML1");
    }

    /**
     * Container's getter for AerolineaUsuarioView2.
     * @return AerolineaUsuarioView2
     */
    public VistaObjeto getAerolineaUsuarioView2() {
        return (VistaObjeto) findViewObject("AerolineaUsuarioView2");
    }

    /**
     * Container's getter for AerolineaUsuarioView1.
     * @return AerolineaUsuarioView1
     */
    public VistaObjeto getAerolineaUsuarioView1() {
        return (VistaObjeto) findViewObject("AerolineaUsuarioView1");
    }

    /**
     * Container's getter for LibroDireccionAerolineaUsuarioLink1.
     * @return LibroDireccionAerolineaUsuarioLink1
     */
    public ViewLinkImpl getLibroDireccionAerolineaUsuarioLink1() {
        return (ViewLinkImpl) findViewLink("LibroDireccionAerolineaUsuarioLink1");
    }


    /**
     * Container's getter for UsuarioViewNoDML3.
     * @return UsuarioViewNoDML3
     */
    public model.bc.vistaNoDML.UsuarioViewNoDMLImpl getBase_UsuarioViewNoDML1() {
        return (model.bc.vistaNoDML.UsuarioViewNoDMLImpl) findViewObject("Base_UsuarioViewNoDML1");
    }

    /**
     * Container's getter for UsuarioAsignadoViewNoDML1.
     * @return UsuarioAsignadoViewNoDML1
     */
    public UsuarioAsignadoViewNoDMLImpl getUsuarioAsignadoViewNoDML1() {
        return (UsuarioAsignadoViewNoDMLImpl) findViewObject("UsuarioAsignadoViewNoDML1");
    }

    /**
     * Container's getter for LibroDireccionesViewNoDML1.
     * @return LibroDireccionesViewNoDML1
     */
    public LibroDireccionesViewNoDMLImpl getLibroDireccionesAeropuertoViewNoDML1() {
        return (LibroDireccionesViewNoDMLImpl) findViewObject("LibroDireccionesAeropuertoViewNoDML1");
    }

    /**
     * Container's getter for TasaView1.
     * @return TasaView1
     */
    public VistaObjeto getTasaView1() {
        return (VistaObjeto) findViewObject("TasaView1");
    }

    /**
     * Container's getter for ManifiestoViewNoDML1.
     * @return ManifiestoViewNoDML1
     */
    public ManifiestoViewNoDMLImpl getManifiestoViewNoDML1() {
        return (ManifiestoViewNoDMLImpl) findViewObject("ManifiestoViewNoDML1");
    }

    /**
     * Container's getter for LibroDireccionesViewNoDML1.
     * @return LibroDireccionesViewNoDML1
     */
    public LibroDireccionesViewNoDMLImpl getLibroDireccionesAeronaveViewNoDML1() {
        return (LibroDireccionesViewNoDMLImpl) findViewObject("LibroDireccionesAeronaveViewNoDML1");
    }

    /**
     * Container's getter for LibroDireccionesViewNoDML1.
     * @return LibroDireccionesViewNoDML1
     */
    public LibroDireccionesViewNoDMLImpl getLibroDireccionesAeropuertoDestinoViewNoDML1() {
        return (LibroDireccionesViewNoDMLImpl) findViewObject("LibroDireccionesAeropuertoDestinoViewNoDML1");
    }

    /**
     * Container's getter for LibroDireccionesViewNoDML1.
     * @return LibroDireccionesViewNoDML1
     */
    public LibroDireccionesViewNoDMLImpl getLibroDireccionesAerolineaViewNoDML1() {
        return (LibroDireccionesViewNoDMLImpl) findViewObject("LibroDireccionesAerolineaViewNoDML1");
    }
}