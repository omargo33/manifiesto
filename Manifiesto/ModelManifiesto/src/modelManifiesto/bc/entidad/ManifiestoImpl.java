package modelManifiesto.bc.entidad;

import java.sql.Date;

import java.util.Calendar;

import model.bc.Entidad;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 18 00:53:19 ECT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ManifiestoImpl extends Entidad {


    /**
     * Validation method for FechaLocalOperacion.
     */
    public boolean validateFechaLocalOperacion(Date fechalocaloperacion) {
        Double diasPrevios = getParametroValor01("004");
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new java.util.Date());
        calendar.add(Calendar.DAY_OF_YEAR, (diasPrevios.intValue() * -1));
        return fechalocaloperacion.getTime() > calendar.getTime().getTime();
    }

    /**
     * Validation method for Pasajeros.
     */
    public boolean validatePasajeros(Integer pasajeros) {
        Double pasajerosMaximo = getParametroValor01("005");
        return pasajeros<pasajerosMaximo.intValue();        
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        IdManifiesto,
        IdUsuario,
        IdLibroDireccionAerolinea,
        IdLibroDireccionAeropuerto,
        IdLibroDireccionAeropuertoDes,
        IdLibroDireccionAeronave,
        FechaLocalOperacion,
        NoVuelo,
        Tipo,
        Pasajeros,
        PasajerosTransito,
        PasajerosLocales,
        PasajerosExentosTasas,
        PasajerosPaganTasas,
        PasajerosPaganDolares,
        PasajerosPaganPesos,
        PasajerosExentosTimbres,
        PasajerosPaganTimbres,
        PasajerosPaganTimbresDolares,
        PasajerosPaganTimbresPesos,
        IndicadorComprobable,
        Estado,
        Usuario,
        UsuarioFecha,
        UsuarioPrograma,
        AerolineaUsuario;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDMANIFIESTO = AttributesEnum.IdManifiesto.index();
    public static final int IDUSUARIO = AttributesEnum.IdUsuario.index();
    public static final int IDLIBRODIRECCIONAEROLINEA = AttributesEnum.IdLibroDireccionAerolinea.index();
    public static final int IDLIBRODIRECCIONAEROPUERTO = AttributesEnum.IdLibroDireccionAeropuerto.index();
    public static final int IDLIBRODIRECCIONAEROPUERTODES = AttributesEnum.IdLibroDireccionAeropuertoDes.index();
    public static final int IDLIBRODIRECCIONAERONAVE = AttributesEnum.IdLibroDireccionAeronave.index();
    public static final int FECHALOCALOPERACION = AttributesEnum.FechaLocalOperacion.index();
    public static final int NOVUELO = AttributesEnum.NoVuelo.index();
    public static final int TIPO = AttributesEnum.Tipo.index();
    public static final int PASAJEROS = AttributesEnum.Pasajeros.index();
    public static final int PASAJEROSTRANSITO = AttributesEnum.PasajerosTransito.index();
    public static final int PASAJEROSLOCALES = AttributesEnum.PasajerosLocales.index();
    public static final int PASAJEROSEXENTOSTASAS = AttributesEnum.PasajerosExentosTasas.index();
    public static final int PASAJEROSPAGANTASAS = AttributesEnum.PasajerosPaganTasas.index();
    public static final int PASAJEROSPAGANDOLARES = AttributesEnum.PasajerosPaganDolares.index();
    public static final int PASAJEROSPAGANPESOS = AttributesEnum.PasajerosPaganPesos.index();
    public static final int PASAJEROSEXENTOSTIMBRES = AttributesEnum.PasajerosExentosTimbres.index();
    public static final int PASAJEROSPAGANTIMBRES = AttributesEnum.PasajerosPaganTimbres.index();
    public static final int PASAJEROSPAGANTIMBRESDOLARES = AttributesEnum.PasajerosPaganTimbresDolares.index();
    public static final int PASAJEROSPAGANTIMBRESPESOS = AttributesEnum.PasajerosPaganTimbresPesos.index();
    public static final int INDICADORCOMPROBABLE = AttributesEnum.IndicadorComprobable.index();
    public static final int ESTADO = AttributesEnum.Estado.index();
    public static final int USUARIO = AttributesEnum.Usuario.index();
    public static final int USUARIOFECHA = AttributesEnum.UsuarioFecha.index();
    public static final int USUARIOPROGRAMA = AttributesEnum.UsuarioPrograma.index();
    public static final int AEROLINEAUSUARIO = AttributesEnum.AerolineaUsuario.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ManifiestoImpl() {
        super();
        setNombreBundle("modelManifiesto.ModelManifiestoBundle");

    }

    /**
     * @param idManifiesto key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer idManifiesto) {
        return new Key(new Object[] { idManifiesto });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("modelManifiesto.bc.entidad.Manifiesto");
    }


    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        /*  if (operation == DML_DELETE)
            noBorrar(AEROLINEA);*/



        super.doDML(operation, e);
        //Id refresh
        if (operation == DML_INSERT)
            setAttribute(IDMANIFIESTO, getUltimoId());
    }
}

